// Code generated by protoc-gen-psrpc v0.3.0, DO NOT EDIT.
// source: rpc/encom.proto

package rpc

import (
	"context"

	"github.com/livekit/psrpc"
	"github.com/livekit/psrpc/pkg/client"
	"github.com/livekit/psrpc/pkg/info"
	"github.com/livekit/psrpc/pkg/server"
	"github.com/livekit/psrpc/version"
)
import livekit3 "github.com/livekit/protocol/livekit"

var _ = version.PsrpcVersion_0_3_0

// ======================
// Encom Client Interface
// ======================

type EncomClient interface {
	SubscribeRoomWebhooks(ctx context.Context, room string, identity string, trackId string) (psrpc.Subscription[*livekit3.WebhookEvent], error)

	SubscribeEgressWebhooks(ctx context.Context, egressId string) (psrpc.Subscription[*livekit3.WebhookEvent], error)

	SubscribeIngressWebhooks(ctx context.Context, ingressId string) (psrpc.Subscription[*livekit3.WebhookEvent], error)
}

// ==========================
// Encom ServerImpl Interface
// ==========================

type EncomServerImpl interface {
}

// ======================
// Encom Server Interface
// ======================

type EncomServer interface {
	PublishRoomWebhooks(ctx context.Context, room string, identity string, trackId string, msg *livekit3.WebhookEvent) error

	PublishEgressWebhooks(ctx context.Context, egressId string, msg *livekit3.WebhookEvent) error

	PublishIngressWebhooks(ctx context.Context, ingressId string, msg *livekit3.WebhookEvent) error

	// Close and wait for pending RPCs to complete
	Shutdown()

	// Close immediately, without waiting for pending RPCs
	Kill()
}

// ============
// Encom Client
// ============

type encomClient struct {
	client *client.RPCClient
}

// NewEncomClient creates a psrpc client that implements the EncomClient interface.
func NewEncomClient(clientID string, bus psrpc.MessageBus, opts ...psrpc.ClientOption) (EncomClient, error) {
	sd := &info.ServiceDefinition{
		Name: "Encom",
		ID:   clientID,
	}

	sd.RegisterMethod("RoomWebhooks", false, true, false)
	sd.RegisterMethod("EgressWebhooks", false, true, false)
	sd.RegisterMethod("IngressWebhooks", false, true, false)

	rpcClient, err := client.NewRPCClient(sd, bus, opts...)
	if err != nil {
		return nil, err
	}

	return &encomClient{
		client: rpcClient,
	}, nil
}

func (c *encomClient) SubscribeRoomWebhooks(ctx context.Context, room string, identity string, trackId string) (psrpc.Subscription[*livekit3.WebhookEvent], error) {
	return client.Join[*livekit3.WebhookEvent](ctx, c.client, "RoomWebhooks", []string{room, identity, trackId})
}

func (c *encomClient) SubscribeEgressWebhooks(ctx context.Context, egressId string) (psrpc.Subscription[*livekit3.WebhookEvent], error) {
	return client.Join[*livekit3.WebhookEvent](ctx, c.client, "EgressWebhooks", []string{egressId})
}

func (c *encomClient) SubscribeIngressWebhooks(ctx context.Context, ingressId string) (psrpc.Subscription[*livekit3.WebhookEvent], error) {
	return client.Join[*livekit3.WebhookEvent](ctx, c.client, "IngressWebhooks", []string{ingressId})
}

// ============
// Encom Server
// ============

type encomServer struct {
	svc EncomServerImpl
	rpc *server.RPCServer
}

// NewEncomServer builds a RPCServer that will route requests
// to the corresponding method in the provided svc implementation.
func NewEncomServer(serverID string, svc EncomServerImpl, bus psrpc.MessageBus, opts ...psrpc.ServerOption) (EncomServer, error) {
	sd := &info.ServiceDefinition{
		Name: "Encom",
		ID:   serverID,
	}

	s := server.NewRPCServer(sd, bus, opts...)

	sd.RegisterMethod("RoomWebhooks", false, true, false)
	sd.RegisterMethod("EgressWebhooks", false, true, false)
	sd.RegisterMethod("IngressWebhooks", false, true, false)
	return &encomServer{
		svc: svc,
		rpc: s,
	}, nil
}

func (s *encomServer) PublishRoomWebhooks(ctx context.Context, room string, identity string, trackId string, msg *livekit3.WebhookEvent) error {
	return s.rpc.Publish(ctx, "RoomWebhooks", []string{room, identity, trackId}, msg)
}

func (s *encomServer) PublishEgressWebhooks(ctx context.Context, egressId string, msg *livekit3.WebhookEvent) error {
	return s.rpc.Publish(ctx, "EgressWebhooks", []string{egressId}, msg)
}

func (s *encomServer) PublishIngressWebhooks(ctx context.Context, ingressId string, msg *livekit3.WebhookEvent) error {
	return s.rpc.Publish(ctx, "IngressWebhooks", []string{ingressId}, msg)
}

func (s *encomServer) Shutdown() {
	s.rpc.Close(false)
}

func (s *encomServer) Kill() {
	s.rpc.Close(true)
}

var psrpcFileDescriptor1 = []byte{
	// 240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x90, 0x4f, 0x4a, 0xc4, 0x30,
	0x14, 0x87, 0x89, 0xff, 0xa8, 0x71, 0x74, 0xe4, 0xe9, 0xe0, 0xd0, 0x65, 0x17, 0x2e, 0x44, 0x5a,
	0xd0, 0x1b, 0x08, 0x5d, 0xb8, 0x75, 0x33, 0xe8, 0x66, 0xb0, 0xe9, 0xa3, 0xf3, 0xa8, 0xc9, 0x0b,
	0x49, 0xac, 0x78, 0x84, 0x1e, 0xc3, 0x2b, 0xf4, 0x84, 0x32, 0x6d, 0x74, 0xe5, 0xca, 0x59, 0x05,
	0xbe, 0xf0, 0x7d, 0x3f, 0x78, 0x72, 0xee, 0xac, 0x2a, 0xd0, 0x28, 0xd6, 0xb9, 0x75, 0x1c, 0x18,
	0xf6, 0x9d, 0x55, 0xe9, 0x29, 0xdb, 0x40, 0x6c, 0xfc, 0xc4, 0xd2, 0xc5, 0x1b, 0x75, 0xd8, 0x52,
	0x58, 0x7f, 0x60, 0xb5, 0x61, 0x6e, 0x27, 0x7c, 0xf7, 0xb5, 0x27, 0x0f, 0xcb, 0xad, 0x0a, 0xb5,
	0x9c, 0x3d, 0x31, 0xeb, 0xd5, 0xf4, 0xed, 0x61, 0x91, 0x47, 0x23, 0x8f, 0xa8, 0xec, 0xd0, 0x84,
	0xf4, 0x6f, 0x9c, 0x5d, 0x0f, 0xbd, 0xc8, 0x12, 0x71, 0x2e, 0x96, 0x22, 0x4b, 0xe1, 0xc0, 0x31,
	0x6b, 0x48, 0xa8, 0x46, 0x13, 0x28, 0x7c, 0x42, 0x12, 0xdc, 0xab, 0x6a, 0xd7, 0x54, 0xc3, 0x4a,
	0x9e, 0x95, 0x8d, 0x43, 0xef, 0xff, 0xb9, 0x73, 0x35, 0xf4, 0xe2, 0x22, 0xee, 0x9c, 0xc0, 0x31,
	0x8e, 0xad, 0x6d, 0xf8, 0x59, 0xce, 0x1f, 0xcd, 0x2e, 0xe5, 0xe5, 0xd0, 0x8b, 0xcb, 0x58, 0x9e,
	0x81, 0x24, 0xf3, 0x93, 0x7e, 0xb8, 0x7d, 0xb9, 0x69, 0x28, 0x6c, 0xde, 0xab, 0x5c, 0xb1, 0x2e,
	0xa2, 0xfc, 0xfb, 0xda, 0xb6, 0x29, 0x3c, 0xba, 0x8e, 0x14, 0x16, 0xce, 0xaa, 0xea, 0x68, 0x3c,
	0xec, 0xfd, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x81, 0x87, 0x8b, 0x0d, 0x96, 0x01, 0x00, 0x00,
}
